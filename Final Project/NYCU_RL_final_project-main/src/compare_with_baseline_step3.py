import matplotlib.pyplot as plt
import argparse
import numpy as np
import os

def initialize_plot():
    plt.figure(figsize=(10, 5))
    plt.xlabel('Time steps')
    plt.ylabel('Average Return')

def human(args):

    initialize_plot()
    plt.title('Pen-human-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_pen-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/{}/BCQ_{}_pen-human-v0_{}.npy".format(args.method, args.method, seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    x = np.linspace(0, 1e6, 201)
    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = args.method)
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.legend()
    plt.savefig("./Plots_step3/{}/Compare_pen-human.png".format(args.method))
    plt.show()
    plt.close()

    initialize_plot()
    plt.title('Hammer-human-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_hammer-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/{}/BCQ_{}_hammer-human-v0_{}.npy".format(args.method, args.method, seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    x = np.linspace(0, 1e6, 201)
    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = args.method)
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.legend()
    plt.savefig("./Plots_step3/{}/Compare_hammer-human.png".format(args.method))
    plt.show()
    plt.close()

    initialize_plot()
    plt.title('Door-human-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_door-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/{}/BCQ_{}_door-human-v0_{}.npy".format(args.method, args.method, seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    x = np.linspace(0, 1e6, 201)
    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = args.method)
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.legend()
    plt.savefig("./Plots_step3/{}/Compare_door-human.png".format(args.method))
    plt.show()
    plt.close()

    initialize_plot()
    plt.title('Relocate-human-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_relocate-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/{}/BCQ_{}_relocate-human-v0_{}.npy".format(args.method, args.method, seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    x = np.linspace(0, 1e6, 201)
    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = args.method)
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.legend()
    plt.savefig("./Plots_step3/{}/Compare_relocate-human.png".format(args.method))
    plt.show()
    plt.close()

def cloned(args):

    initialize_plot()
    plt.title('Pen-cloned-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_pen-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/{}/BCQ_{}_pen-cloned-v0_{}.npy".format(args.method, args.method, seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    x = np.linspace(0, 1e6, 201)
    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = args.method)
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.legend()
    plt.savefig("./Plots_step3/{}/Compare_pen-cloned.png".format(args.method))
    plt.show()
    plt.close()

    initialize_plot()
    plt.title('Hammer-cloned-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_hammer-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/{}/BCQ_{}_hammer-cloned-v0_{}.npy".format(args.method, args.method, seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    x = np.linspace(0, 1e6, 201)
    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = args.method)
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.legend()
    plt.savefig("./Plots_step3/{}/Compare_hammer-cloned.png".format(args.method))
    plt.show()
    plt.close()

    initialize_plot()
    plt.title('Door-cloned-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_door-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/{}/BCQ_{}_door-cloned-v0_{}.npy".format(args.method, args.method, seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    x = np.linspace(0, 1e6, 201)
    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = args.method)
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.legend()
    plt.savefig("./Plots_step3/{}/Compare_door-cloned.png".format(args.method))
    plt.show()
    plt.close()

    initialize_plot()
    plt.title('Relocate-cloned-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_relocate-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/{}/BCQ_{}_relocate-cloned-v0_{}.npy".format(args.method, args.method, seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    x = np.linspace(0, 1e6, 201)
    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = args.method)
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.legend()
    plt.savefig("./Plots_step3/{}/Compare_relocate-cloned.png".format(args.method))
    plt.show()
    plt.close()

def expert(args):

    initialize_plot()
    plt.title('Pen-expert-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_pen-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/{}/BCQ_{}_pen-expert-v0_{}.npy".format(args.method, args.method, seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    x = np.linspace(0, 1e6, 201)
    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = args.method)
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.legend()
    plt.savefig("./Plots_step3/{}/Compare_pen-expert.png".format(args.method))
    plt.show()
    plt.close()

    initialize_plot()
    plt.title('Hammer-expert-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_hammer-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/{}/BCQ_{}_hammer-expert-v0_{}.npy".format(args.method, args.method, seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    x = np.linspace(0, 1e6, 201)
    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = args.method)
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.legend()
    plt.savefig("./Plots_step3/{}/Compare_hammer-expert.png".format(args.method))
    plt.show()
    plt.close()

    initialize_plot()
    plt.title('Door-expert-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_door-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/{}/BCQ_{}_door-expert-v0_{}.npy".format(args.method, args.method, seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    x = np.linspace(0, 1e6, 201)
    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = args.method)
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.legend()
    plt.savefig("./Plots_step3/{}/Compare_door-expert.png".format(args.method))
    plt.show()
    plt.close()

    initialize_plot()
    plt.title('Relocate-expert-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_relocate-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/{}/BCQ_{}_relocate-expert-v0_{}.npy".format(args.method, args.method, seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    x = np.linspace(0, 1e6, 201)
    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = args.method)
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.legend()
    plt.savefig("./Plots_step3/{}/Compare_relocate-expert.png".format(args.method))
    plt.show()
    plt.close()

if __name__ == "__main__":

    os.makedirs("./Plots", exist_ok=True)

    parser = argparse.ArgumentParser()
    parser.add_argument("--method", default='GAN')
    args = parser.parse_args()

    human(args)
    cloned(args)
    expert(args)