import matplotlib.pyplot as plt
import numpy as np
import os

def initialize_plot():
    plt.figure(figsize=(10, 5))
    plt.xlabel('Time steps')
    plt.ylabel('Average Return')

def human():

    initialize_plot()
    plt.title('Pen-human-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_pen-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/GAN/BCQ_GAN_pen-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    rewards_quad = np.array([np.load("./results_step3/quadruple/BCQ_quadruple_pen-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_quad_avg = np.mean(rewards_quad, axis = 1)
    rewards_quad_std = np.std(rewards_quad, axis = 1)
    rewards_quad_avg = np.insert(rewards_quad_avg, 0, 0)
    rewards_quad_std = np.insert(rewards_quad_std, 0, 0)

    rewards_shared = np.array([np.load("./results_step3/shared/BCQ_shared_pen-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_shared_avg = np.mean(rewards_shared, axis = 1)
    rewards_shared_std = np.std(rewards_shared, axis = 1)
    rewards_shared_avg = np.insert(rewards_shared_avg, 0, 0)
    rewards_shared_std = np.insert(rewards_shared_std, 0, 0)

    rewards_no = np.array([np.load("./results_step3/no_perturbation/BCQ_no_perturbation_pen-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_no_avg = np.mean(rewards_no, axis = 1)
    rewards_no_std = np.std(rewards_no, axis = 1)
    rewards_no_avg = np.insert(rewards_no_avg, 0, 0)
    rewards_no_std = np.insert(rewards_no_std, 0, 0)

    rewards_09 = np.array([np.load("./results_step3/gamma09/BCQ_gamma09_pen-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_09_avg = np.mean(rewards_09, axis = 1)
    rewards_09_std = np.std(rewards_09, axis = 1)
    rewards_09_avg = np.insert(rewards_09_avg, 0, 0)
    rewards_09_std = np.insert(rewards_09_std, 0, 0)

    rewards_200 = np.array([np.load("./results_step3/batch200/BCQ_batch200_pen-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_200_avg = np.mean(rewards_200, axis = 1)
    rewards_200_std = np.std(rewards_200, axis = 1)
    rewards_200_avg = np.insert(rewards_200_avg, 0, 0)
    rewards_200_std = np.insert(rewards_200_std, 0, 0)

    x = np.linspace(0, 1e6, 201)
    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = 'GAN')
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.plot(x, rewards_quad_avg, color = 'green', label = 'quadruple')
    plt.fill_between(x, rewards_quad_avg + rewards_quad_std, rewards_quad_avg - rewards_quad_std, facecolor = 'lightgreen')
    plt.plot(x, rewards_shared_avg, color = 'darkviolet', label = 'shared')
    plt.fill_between(x, rewards_shared_avg + rewards_shared_std, rewards_shared_avg - rewards_shared_std, facecolor = 'plum')
    plt.plot(x, rewards_no_avg, color = 'gold', label = 'no_perturb')
    plt.fill_between(x, rewards_no_avg + rewards_no_std, rewards_no_avg - rewards_no_std, facecolor = 'lemonchiffon')
    plt.plot(x, rewards_09_avg, color = 'red', label = 'gamma 0.9')
    plt.fill_between(x, rewards_09_avg + rewards_09_std, rewards_09_avg - rewards_09_std, facecolor = 'salmon')
    plt.plot(x, rewards_200_avg, color = 'deeppink', label = 'batch size 200')
    plt.fill_between(x, rewards_200_avg + rewards_200_std, rewards_200_avg - rewards_200_std, facecolor = 'hotpink')
    plt.legend()
    plt.savefig("./Plots_step3/compare/pen-human.png")
    plt.show()
    plt.close()

    initialize_plot()
    plt.title('Hammer-human-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_hammer-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/GAN/BCQ_GAN_hammer-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    rewards_quad = np.array([np.load("./results_step3/quadruple/BCQ_quadruple_hammer-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_quad_avg = np.mean(rewards_quad, axis = 1)
    rewards_quad_std = np.std(rewards_quad, axis = 1)
    rewards_quad_avg = np.insert(rewards_quad_avg, 0, 0)
    rewards_quad_std = np.insert(rewards_quad_std, 0, 0)

    rewards_shared = np.array([np.load("./results_step3/shared/BCQ_shared_hammer-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_shared_avg = np.mean(rewards_shared, axis = 1)
    rewards_shared_std = np.std(rewards_shared, axis = 1)
    rewards_shared_avg = np.insert(rewards_shared_avg, 0, 0)
    rewards_shared_std = np.insert(rewards_shared_std, 0, 0)

    rewards_no = np.array([np.load("./results_step3/no_perturbation/BCQ_no_perturbation_hammer-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_no_avg = np.mean(rewards_no, axis = 1)
    rewards_no_std = np.std(rewards_no, axis = 1)
    rewards_no_avg = np.insert(rewards_no_avg, 0, 0)
    rewards_no_std = np.insert(rewards_no_std, 0, 0)

    rewards_09 = np.array([np.load("./results_step3/gamma09/BCQ_gamma09_hammer-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_09_avg = np.mean(rewards_09, axis = 1)
    rewards_09_std = np.std(rewards_09, axis = 1)
    rewards_09_avg = np.insert(rewards_09_avg, 0, 0)
    rewards_09_std = np.insert(rewards_09_std, 0, 0)

    rewards_200 = np.array([np.load("./results_step3/batch200/BCQ_batch200_hammer-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_200_avg = np.mean(rewards_200, axis = 1)
    rewards_200_std = np.std(rewards_200, axis = 1)
    rewards_200_avg = np.insert(rewards_200_avg, 0, 0)
    rewards_200_std = np.insert(rewards_200_std, 0, 0)

    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = 'GAN')
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.plot(x, rewards_quad_avg, color = 'green', label = 'quadruple')
    plt.fill_between(x, rewards_quad_avg + rewards_quad_std, rewards_quad_avg - rewards_quad_std, facecolor = 'lightgreen')
    plt.plot(x, rewards_shared_avg, color = 'darkviolet', label = 'shared')
    plt.fill_between(x, rewards_shared_avg + rewards_shared_std, rewards_shared_avg - rewards_shared_std, facecolor = 'plum')
    plt.plot(x, rewards_no_avg, color = 'gold', label = 'no_perturb')
    plt.fill_between(x, rewards_no_avg + rewards_no_std, rewards_no_avg - rewards_no_std, facecolor = 'lemonchiffon')
    plt.plot(x, rewards_09_avg, color = 'red', label = 'gamma 0.9')
    plt.fill_between(x, rewards_09_avg + rewards_09_std, rewards_09_avg - rewards_09_std, facecolor = 'salmon')
    plt.plot(x, rewards_200_avg, color = 'deeppink', label = 'batch size 200')
    plt.fill_between(x, rewards_200_avg + rewards_200_std, rewards_200_avg - rewards_200_std, facecolor = 'hotpink')
    plt.legend()
    plt.savefig("./Plots_step3/compare/hammer-human.png")
    plt.show()
    plt.close()

    initialize_plot()
    plt.title('Door-human-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_door-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/GAN/BCQ_GAN_door-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    rewards_quad = np.array([np.load("./results_step3/quadruple/BCQ_quadruple_door-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_quad_avg = np.mean(rewards_quad, axis = 1)
    rewards_quad_std = np.std(rewards_quad, axis = 1)
    rewards_quad_avg = np.insert(rewards_quad_avg, 0, 0)
    rewards_quad_std = np.insert(rewards_quad_std, 0, 0)

    rewards_shared = np.array([np.load("./results_step3/shared/BCQ_shared_door-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_shared_avg = np.mean(rewards_shared, axis = 1)
    rewards_shared_std = np.std(rewards_shared, axis = 1)
    rewards_shared_avg = np.insert(rewards_shared_avg, 0, 0)
    rewards_shared_std = np.insert(rewards_shared_std, 0, 0)

    rewards_no = np.array([np.load("./results_step3/no_perturbation/BCQ_no_perturbation_door-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_no_avg = np.mean(rewards_no, axis = 1)
    rewards_no_std = np.std(rewards_no, axis = 1)
    rewards_no_avg = np.insert(rewards_no_avg, 0, 0)
    rewards_no_std = np.insert(rewards_no_std, 0, 0)

    rewards_09 = np.array([np.load("./results_step3/gamma09/BCQ_gamma09_door-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_09_avg = np.mean(rewards_09, axis = 1)
    rewards_09_std = np.std(rewards_09, axis = 1)
    rewards_09_avg = np.insert(rewards_09_avg, 0, 0)
    rewards_09_std = np.insert(rewards_09_std, 0, 0)

    rewards_200 = np.array([np.load("./results_step3/batch200/BCQ_batch200_door-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_200_avg = np.mean(rewards_200, axis = 1)
    rewards_200_std = np.std(rewards_200, axis = 1)
    rewards_200_avg = np.insert(rewards_200_avg, 0, 0)
    rewards_200_std = np.insert(rewards_200_std, 0, 0)

    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = 'GAN')
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.plot(x, rewards_quad_avg, color = 'green', label = 'quadruple')
    plt.fill_between(x, rewards_quad_avg + rewards_quad_std, rewards_quad_avg - rewards_quad_std, facecolor = 'lightgreen')
    plt.plot(x, rewards_shared_avg, color = 'darkviolet', label = 'shared')
    plt.fill_between(x, rewards_shared_avg + rewards_shared_std, rewards_shared_avg - rewards_shared_std, facecolor = 'plum')
    plt.plot(x, rewards_no_avg, color = 'gold', label = 'no_perturb')
    plt.fill_between(x, rewards_no_avg + rewards_no_std, rewards_no_avg - rewards_no_std, facecolor = 'lemonchiffon')
    plt.plot(x, rewards_09_avg, color = 'red', label = 'gamma 0.9')
    plt.fill_between(x, rewards_09_avg + rewards_09_std, rewards_09_avg - rewards_09_std, facecolor = 'salmon')
    plt.plot(x, rewards_200_avg, color = 'deeppink', label = 'batch size 200')
    plt.fill_between(x, rewards_200_avg + rewards_200_std, rewards_200_avg - rewards_200_std, facecolor = 'hotpink')
    plt.legend()
    plt.savefig("./Plots_step3/compare/door-human.png")
    plt.show()
    plt.close()

    initialize_plot()
    plt.title('Relocate-human-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_relocate-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/GAN/BCQ_GAN_relocate-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    rewards_quad = np.array([np.load("./results_step3/quadruple/BCQ_quadruple_relocate-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_quad_avg = np.mean(rewards_quad, axis = 1)
    rewards_quad_std = np.std(rewards_quad, axis = 1)
    rewards_quad_avg = np.insert(rewards_quad_avg, 0, 0)
    rewards_quad_std = np.insert(rewards_quad_std, 0, 0)

    rewards_shared = np.array([np.load("./results_step3/shared/BCQ_shared_relocate-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_shared_avg = np.mean(rewards_shared, axis = 1)
    rewards_shared_std = np.std(rewards_shared, axis = 1)
    rewards_shared_avg = np.insert(rewards_shared_avg, 0, 0)
    rewards_shared_std = np.insert(rewards_shared_std, 0, 0)

    rewards_no = np.array([np.load("./results_step3/no_perturbation/BCQ_no_perturbation_relocate-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_no_avg = np.mean(rewards_no, axis = 1)
    rewards_no_std = np.std(rewards_no, axis = 1)
    rewards_no_avg = np.insert(rewards_no_avg, 0, 0)
    rewards_no_std = np.insert(rewards_no_std, 0, 0)

    rewards_09 = np.array([np.load("./results_step3/gamma09/BCQ_gamma09_relocate-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_09_avg = np.mean(rewards_09, axis = 1)
    rewards_09_std = np.std(rewards_09, axis = 1)
    rewards_09_avg = np.insert(rewards_09_avg, 0, 0)
    rewards_09_std = np.insert(rewards_09_std, 0, 0)

    rewards_200 = np.array([np.load("./results_step3/batch200/BCQ_batch200_relocate-human-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_200_avg = np.mean(rewards_200, axis = 1)
    rewards_200_std = np.std(rewards_200, axis = 1)
    rewards_200_avg = np.insert(rewards_200_avg, 0, 0)
    rewards_200_std = np.insert(rewards_200_std, 0, 0)

    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = 'GAN')
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.plot(x, rewards_quad_avg, color = 'green', label = 'quadruple')
    plt.fill_between(x, rewards_quad_avg + rewards_quad_std, rewards_quad_avg - rewards_quad_std, facecolor = 'lightgreen')
    plt.plot(x, rewards_shared_avg, color = 'darkviolet', label = 'shared')
    plt.fill_between(x, rewards_shared_avg + rewards_shared_std, rewards_shared_avg - rewards_shared_std, facecolor = 'plum')
    plt.plot(x, rewards_no_avg, color = 'gold', label = 'no_perturb')
    plt.fill_between(x, rewards_no_avg + rewards_no_std, rewards_no_avg - rewards_no_std, facecolor = 'lemonchiffon')
    plt.plot(x, rewards_09_avg, color = 'red', label = 'gamma 0.9')
    plt.fill_between(x, rewards_09_avg + rewards_09_std, rewards_09_avg - rewards_09_std, facecolor = 'salmon')
    plt.plot(x, rewards_200_avg, color = 'deeppink', label = 'batch size 200')
    plt.fill_between(x, rewards_200_avg + rewards_200_std, rewards_200_avg - rewards_200_std, facecolor = 'hotpink')
    plt.legend()
    plt.savefig("./Plots_step3/compare/relocate-human.png")
    plt.show()
    plt.close()

def cloned():

    initialize_plot()
    plt.title('Pen-cloned-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_pen-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/GAN/BCQ_GAN_pen-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    rewards_quad = np.array([np.load("./results_step3/quadruple/BCQ_quadruple_pen-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_quad_avg = np.mean(rewards_quad, axis = 1)
    rewards_quad_std = np.std(rewards_quad, axis = 1)
    rewards_quad_avg = np.insert(rewards_quad_avg, 0, 0)
    rewards_quad_std = np.insert(rewards_quad_std, 0, 0)

    rewards_shared = np.array([np.load("./results_step3/shared/BCQ_shared_pen-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_shared_avg = np.mean(rewards_shared, axis = 1)
    rewards_shared_std = np.std(rewards_shared, axis = 1)
    rewards_shared_avg = np.insert(rewards_shared_avg, 0, 0)
    rewards_shared_std = np.insert(rewards_shared_std, 0, 0)

    rewards_no = np.array([np.load("./results_step3/no_perturbation/BCQ_no_perturbation_pen-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_no_avg = np.mean(rewards_no, axis = 1)
    rewards_no_std = np.std(rewards_no, axis = 1)
    rewards_no_avg = np.insert(rewards_no_avg, 0, 0)
    rewards_no_std = np.insert(rewards_no_std, 0, 0)

    rewards_09 = np.array([np.load("./results_step3/gamma09/BCQ_gamma09_pen-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_09_avg = np.mean(rewards_09, axis = 1)
    rewards_09_std = np.std(rewards_09, axis = 1)
    rewards_09_avg = np.insert(rewards_09_avg, 0, 0)
    rewards_09_std = np.insert(rewards_09_std, 0, 0)

    rewards_200 = np.array([np.load("./results_step3/batch200/BCQ_batch200_pen-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_200_avg = np.mean(rewards_200, axis = 1)
    rewards_200_std = np.std(rewards_200, axis = 1)
    rewards_200_avg = np.insert(rewards_200_avg, 0, 0)
    rewards_200_std = np.insert(rewards_200_std, 0, 0)

    x = np.linspace(0, 1e6, 201)
    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = 'GAN')
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.plot(x, rewards_quad_avg, color = 'green', label = 'quadruple')
    plt.fill_between(x, rewards_quad_avg + rewards_quad_std, rewards_quad_avg - rewards_quad_std, facecolor = 'lightgreen')
    plt.plot(x, rewards_shared_avg, color = 'darkviolet', label = 'shared')
    plt.fill_between(x, rewards_shared_avg + rewards_shared_std, rewards_shared_avg - rewards_shared_std, facecolor = 'plum')
    plt.plot(x, rewards_no_avg, color = 'gold', label = 'no_perturb')
    plt.fill_between(x, rewards_no_avg + rewards_no_std, rewards_no_avg - rewards_no_std, facecolor = 'lemonchiffon')
    plt.plot(x, rewards_09_avg, color = 'red', label = 'gamma 0.9')
    plt.fill_between(x, rewards_09_avg + rewards_09_std, rewards_09_avg - rewards_09_std, facecolor = 'salmon')
    plt.plot(x, rewards_200_avg, color = 'deeppink', label = 'batch size 200')
    plt.fill_between(x, rewards_200_avg + rewards_200_std, rewards_200_avg - rewards_200_std, facecolor = 'hotpink')
    plt.legend()
    plt.savefig("./Plots_step3/compare/pen-cloned.png")
    plt.show()
    plt.close()

    initialize_plot()
    plt.title('Hammer-cloned-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_hammer-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/GAN/BCQ_GAN_hammer-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    rewards_quad = np.array([np.load("./results_step3/quadruple/BCQ_quadruple_hammer-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_quad_avg = np.mean(rewards_quad, axis = 1)
    rewards_quad_std = np.std(rewards_quad, axis = 1)
    rewards_quad_avg = np.insert(rewards_quad_avg, 0, 0)
    rewards_quad_std = np.insert(rewards_quad_std, 0, 0)

    rewards_shared = np.array([np.load("./results_step3/shared/BCQ_shared_hammer-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_shared_avg = np.mean(rewards_shared, axis = 1)
    rewards_shared_std = np.std(rewards_shared, axis = 1)
    rewards_shared_avg = np.insert(rewards_shared_avg, 0, 0)
    rewards_shared_std = np.insert(rewards_shared_std, 0, 0)

    rewards_no = np.array([np.load("./results_step3/no_perturbation/BCQ_no_perturbation_hammer-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_no_avg = np.mean(rewards_no, axis = 1)
    rewards_no_std = np.std(rewards_no, axis = 1)
    rewards_no_avg = np.insert(rewards_no_avg, 0, 0)
    rewards_no_std = np.insert(rewards_no_std, 0, 0)

    rewards_09 = np.array([np.load("./results_step3/gamma09/BCQ_gamma09_hammer-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_09_avg = np.mean(rewards_09, axis = 1)
    rewards_09_std = np.std(rewards_09, axis = 1)
    rewards_09_avg = np.insert(rewards_09_avg, 0, 0)
    rewards_09_std = np.insert(rewards_09_std, 0, 0)

    rewards_200 = np.array([np.load("./results_step3/batch200/BCQ_batch200_hammer-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_200_avg = np.mean(rewards_200, axis = 1)
    rewards_200_std = np.std(rewards_200, axis = 1)
    rewards_200_avg = np.insert(rewards_200_avg, 0, 0)
    rewards_200_std = np.insert(rewards_200_std, 0, 0)

    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = 'GAN')
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.plot(x, rewards_quad_avg, color = 'green', label = 'quadruple')
    plt.fill_between(x, rewards_quad_avg + rewards_quad_std, rewards_quad_avg - rewards_quad_std, facecolor = 'lightgreen')
    plt.plot(x, rewards_shared_avg, color = 'darkviolet', label = 'shared')
    plt.fill_between(x, rewards_shared_avg + rewards_shared_std, rewards_shared_avg - rewards_shared_std, facecolor = 'plum')
    plt.plot(x, rewards_no_avg, color = 'gold', label = 'no_perturb')
    plt.fill_between(x, rewards_no_avg + rewards_no_std, rewards_no_avg - rewards_no_std, facecolor = 'lemonchiffon')
    plt.plot(x, rewards_09_avg, color = 'red', label = 'gamma 0.9')
    plt.fill_between(x, rewards_09_avg + rewards_09_std, rewards_09_avg - rewards_09_std, facecolor = 'salmon')
    plt.plot(x, rewards_200_avg, color = 'deeppink', label = 'batch size 200')
    plt.fill_between(x, rewards_200_avg + rewards_200_std, rewards_200_avg - rewards_200_std, facecolor = 'hotpink')
    plt.legend()
    plt.savefig("./Plots_step3/compare/hammer-cloned.png")
    plt.show()
    plt.close()

    initialize_plot()
    plt.title('Door-cloned-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_door-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/GAN/BCQ_GAN_door-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    rewards_quad = np.array([np.load("./results_step3/quadruple/BCQ_quadruple_door-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_quad_avg = np.mean(rewards_quad, axis = 1)
    rewards_quad_std = np.std(rewards_quad, axis = 1)
    rewards_quad_avg = np.insert(rewards_quad_avg, 0, 0)
    rewards_quad_std = np.insert(rewards_quad_std, 0, 0)

    rewards_shared = np.array([np.load("./results_step3/shared/BCQ_shared_door-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_shared_avg = np.mean(rewards_shared, axis = 1)
    rewards_shared_std = np.std(rewards_shared, axis = 1)
    rewards_shared_avg = np.insert(rewards_shared_avg, 0, 0)
    rewards_shared_std = np.insert(rewards_shared_std, 0, 0)

    rewards_no = np.array([np.load("./results_step3/no_perturbation/BCQ_no_perturbation_door-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_no_avg = np.mean(rewards_no, axis = 1)
    rewards_no_std = np.std(rewards_no, axis = 1)
    rewards_no_avg = np.insert(rewards_no_avg, 0, 0)
    rewards_no_std = np.insert(rewards_no_std, 0, 0)

    rewards_09 = np.array([np.load("./results_step3/gamma09/BCQ_gamma09_door-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_09_avg = np.mean(rewards_09, axis = 1)
    rewards_09_std = np.std(rewards_09, axis = 1)
    rewards_09_avg = np.insert(rewards_09_avg, 0, 0)
    rewards_09_std = np.insert(rewards_09_std, 0, 0)

    rewards_200 = np.array([np.load("./results_step3/batch200/BCQ_batch200_door-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_200_avg = np.mean(rewards_200, axis = 1)
    rewards_200_std = np.std(rewards_200, axis = 1)
    rewards_200_avg = np.insert(rewards_200_avg, 0, 0)
    rewards_200_std = np.insert(rewards_200_std, 0, 0)

    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = 'GAN')
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.plot(x, rewards_quad_avg, color = 'green', label = 'quadruple')
    plt.fill_between(x, rewards_quad_avg + rewards_quad_std, rewards_quad_avg - rewards_quad_std, facecolor = 'lightgreen')
    plt.plot(x, rewards_shared_avg, color = 'darkviolet', label = 'shared')
    plt.fill_between(x, rewards_shared_avg + rewards_shared_std, rewards_shared_avg - rewards_shared_std, facecolor = 'plum')
    plt.plot(x, rewards_no_avg, color = 'gold', label = 'no_perturb')
    plt.fill_between(x, rewards_no_avg + rewards_no_std, rewards_no_avg - rewards_no_std, facecolor = 'lemonchiffon')
    plt.plot(x, rewards_09_avg, color = 'red', label = 'gamma 0.9')
    plt.fill_between(x, rewards_09_avg + rewards_09_std, rewards_09_avg - rewards_09_std, facecolor = 'salmon')
    plt.plot(x, rewards_200_avg, color = 'deeppink', label = 'batch size 200')
    plt.fill_between(x, rewards_200_avg + rewards_200_std, rewards_200_avg - rewards_200_std, facecolor = 'hotpink')
    plt.legend()
    plt.savefig("./Plots_step3/compare/door-cloned.png")
    plt.show()
    plt.close()

    initialize_plot()
    plt.title('Relocate-cloned-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_relocate-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/GAN/BCQ_GAN_relocate-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    rewards_quad = np.array([np.load("./results_step3/quadruple/BCQ_quadruple_relocate-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_quad_avg = np.mean(rewards_quad, axis = 1)
    rewards_quad_std = np.std(rewards_quad, axis = 1)
    rewards_quad_avg = np.insert(rewards_quad_avg, 0, 0)
    rewards_quad_std = np.insert(rewards_quad_std, 0, 0)

    rewards_shared = np.array([np.load("./results_step3/shared/BCQ_shared_relocate-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_shared_avg = np.mean(rewards_shared, axis = 1)
    rewards_shared_std = np.std(rewards_shared, axis = 1)
    rewards_shared_avg = np.insert(rewards_shared_avg, 0, 0)
    rewards_shared_std = np.insert(rewards_shared_std, 0, 0)

    rewards_no = np.array([np.load("./results_step3/no_perturbation/BCQ_no_perturbation_relocate-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_no_avg = np.mean(rewards_no, axis = 1)
    rewards_no_std = np.std(rewards_no, axis = 1)
    rewards_no_avg = np.insert(rewards_no_avg, 0, 0)
    rewards_no_std = np.insert(rewards_no_std, 0, 0)

    rewards_09 = np.array([np.load("./results_step3/gamma09/BCQ_gamma09_relocate-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_09_avg = np.mean(rewards_09, axis = 1)
    rewards_09_std = np.std(rewards_09, axis = 1)
    rewards_09_avg = np.insert(rewards_09_avg, 0, 0)
    rewards_09_std = np.insert(rewards_09_std, 0, 0)

    rewards_200 = np.array([np.load("./results_step3/batch200/BCQ_batch200_relocate-cloned-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_200_avg = np.mean(rewards_200, axis = 1)
    rewards_200_std = np.std(rewards_200, axis = 1)
    rewards_200_avg = np.insert(rewards_200_avg, 0, 0)
    rewards_200_std = np.insert(rewards_200_std, 0, 0)

    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = 'GAN')
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.plot(x, rewards_quad_avg, color = 'green', label = 'quadruple')
    plt.fill_between(x, rewards_quad_avg + rewards_quad_std, rewards_quad_avg - rewards_quad_std, facecolor = 'lightgreen')
    plt.plot(x, rewards_shared_avg, color = 'darkviolet', label = 'shared')
    plt.fill_between(x, rewards_shared_avg + rewards_shared_std, rewards_shared_avg - rewards_shared_std, facecolor = 'plum')
    plt.plot(x, rewards_no_avg, color = 'gold', label = 'no_perturb')
    plt.fill_between(x, rewards_no_avg + rewards_no_std, rewards_no_avg - rewards_no_std, facecolor = 'lemonchiffon')
    plt.plot(x, rewards_09_avg, color = 'red', label = 'gamma 0.9')
    plt.fill_between(x, rewards_09_avg + rewards_09_std, rewards_09_avg - rewards_09_std, facecolor = 'salmon')
    plt.plot(x, rewards_200_avg, color = 'deeppink', label = 'batch size 200')
    plt.fill_between(x, rewards_200_avg + rewards_200_std, rewards_200_avg - rewards_200_std, facecolor = 'hotpink')
    plt.legend()
    plt.savefig("./Plots_step3/compare/relocate-cloned.png")
    plt.show()
    plt.close()

def expert():

    initialize_plot()
    plt.title('Pen-expert-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_pen-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/GAN/BCQ_GAN_pen-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    rewards_quad = np.array([np.load("./results_step3/quadruple/BCQ_quadruple_pen-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_quad_avg = np.mean(rewards_quad, axis = 1)
    rewards_quad_std = np.std(rewards_quad, axis = 1)
    rewards_quad_avg = np.insert(rewards_quad_avg, 0, 0)
    rewards_quad_std = np.insert(rewards_quad_std, 0, 0)

    rewards_shared = np.array([np.load("./results_step3/shared/BCQ_shared_pen-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_shared_avg = np.mean(rewards_shared, axis = 1)
    rewards_shared_std = np.std(rewards_shared, axis = 1)
    rewards_shared_avg = np.insert(rewards_shared_avg, 0, 0)
    rewards_shared_std = np.insert(rewards_shared_std, 0, 0)

    rewards_no = np.array([np.load("./results_step3/no_perturbation/BCQ_no_perturbation_pen-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_no_avg = np.mean(rewards_no, axis = 1)
    rewards_no_std = np.std(rewards_no, axis = 1)
    rewards_no_avg = np.insert(rewards_no_avg, 0, 0)
    rewards_no_std = np.insert(rewards_no_std, 0, 0)

    rewards_09 = np.array([np.load("./results_step3/gamma09/BCQ_gamma09_pen-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_09_avg = np.mean(rewards_09, axis = 1)
    rewards_09_std = np.std(rewards_09, axis = 1)
    rewards_09_avg = np.insert(rewards_09_avg, 0, 0)
    rewards_09_std = np.insert(rewards_09_std, 0, 0)

    rewards_200 = np.array([np.load("./results_step3/batch200/BCQ_batch200_pen-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_200_avg = np.mean(rewards_200, axis = 1)
    rewards_200_std = np.std(rewards_200, axis = 1)
    rewards_200_avg = np.insert(rewards_200_avg, 0, 0)
    rewards_200_std = np.insert(rewards_200_std, 0, 0)

    x = np.linspace(0, 1e6, 201)
    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = 'GAN')
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.plot(x, rewards_quad_avg, color = 'green', label = 'quadruple')
    plt.fill_between(x, rewards_quad_avg + rewards_quad_std, rewards_quad_avg - rewards_quad_std, facecolor = 'lightgreen')
    plt.plot(x, rewards_shared_avg, color = 'darkviolet', label = 'shared')
    plt.fill_between(x, rewards_shared_avg + rewards_shared_std, rewards_shared_avg - rewards_shared_std, facecolor = 'plum')
    plt.plot(x, rewards_no_avg, color = 'gold', label = 'no_perturb')
    plt.fill_between(x, rewards_no_avg + rewards_no_std, rewards_no_avg - rewards_no_std, facecolor = 'lemonchiffon')
    plt.plot(x, rewards_09_avg, color = 'red', label = 'gamma 0.9')
    plt.fill_between(x, rewards_09_avg + rewards_09_std, rewards_09_avg - rewards_09_std, facecolor = 'salmon')
    plt.plot(x, rewards_200_avg, color = 'deeppink', label = 'batch size 200')
    plt.fill_between(x, rewards_200_avg + rewards_200_std, rewards_200_avg - rewards_200_std, facecolor = 'hotpink')
    plt.legend()
    plt.savefig("./Plots_step3/compare/pen-expert.png")
    plt.show()
    plt.close()

    initialize_plot()
    plt.title('Hammer-expert-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_hammer-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/GAN/BCQ_GAN_hammer-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    rewards_quad = np.array([np.load("./results_step3/quadruple/BCQ_quadruple_hammer-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_quad_avg = np.mean(rewards_quad, axis = 1)
    rewards_quad_std = np.std(rewards_quad, axis = 1)
    rewards_quad_avg = np.insert(rewards_quad_avg, 0, 0)
    rewards_quad_std = np.insert(rewards_quad_std, 0, 0)

    rewards_shared = np.array([np.load("./results_step3/shared/BCQ_shared_hammer-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_shared_avg = np.mean(rewards_shared, axis = 1)
    rewards_shared_std = np.std(rewards_shared, axis = 1)
    rewards_shared_avg = np.insert(rewards_shared_avg, 0, 0)
    rewards_shared_std = np.insert(rewards_shared_std, 0, 0)

    rewards_no = np.array([np.load("./results_step3/no_perturbation/BCQ_no_perturbation_hammer-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_no_avg = np.mean(rewards_no, axis = 1)
    rewards_no_std = np.std(rewards_no, axis = 1)
    rewards_no_avg = np.insert(rewards_no_avg, 0, 0)
    rewards_no_std = np.insert(rewards_no_std, 0, 0)

    rewards_09 = np.array([np.load("./results_step3/gamma09/BCQ_gamma09_hammer-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_09_avg = np.mean(rewards_09, axis = 1)
    rewards_09_std = np.std(rewards_09, axis = 1)
    rewards_09_avg = np.insert(rewards_09_avg, 0, 0)
    rewards_09_std = np.insert(rewards_09_std, 0, 0)

    rewards_200 = np.array([np.load("./results_step3/batch200/BCQ_batch200_hammer-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_200_avg = np.mean(rewards_200, axis = 1)
    rewards_200_std = np.std(rewards_200, axis = 1)
    rewards_200_avg = np.insert(rewards_200_avg, 0, 0)
    rewards_200_std = np.insert(rewards_200_std, 0, 0)

    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = 'GAN')
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.plot(x, rewards_quad_avg, color = 'green', label = 'quadruple')
    plt.fill_between(x, rewards_quad_avg + rewards_quad_std, rewards_quad_avg - rewards_quad_std, facecolor = 'lightgreen')
    plt.plot(x, rewards_shared_avg, color = 'darkviolet', label = 'shared')
    plt.fill_between(x, rewards_shared_avg + rewards_shared_std, rewards_shared_avg - rewards_shared_std, facecolor = 'plum')
    plt.plot(x, rewards_no_avg, color = 'gold', label = 'no_perturb')
    plt.fill_between(x, rewards_no_avg + rewards_no_std, rewards_no_avg - rewards_no_std, facecolor = 'lemonchiffon')
    plt.plot(x, rewards_09_avg, color = 'red', label = 'gamma 0.9')
    plt.fill_between(x, rewards_09_avg + rewards_09_std, rewards_09_avg - rewards_09_std, facecolor = 'salmon')
    plt.plot(x, rewards_200_avg, color = 'deeppink', label = 'batch size 200')
    plt.fill_between(x, rewards_200_avg + rewards_200_std, rewards_200_avg - rewards_200_std, facecolor = 'hotpink')
    plt.legend()
    plt.savefig("./Plots_step3/compare/hammer-expert.png")
    plt.show()
    plt.close()

    initialize_plot()
    plt.title('Door-expert-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_door-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/GAN/BCQ_GAN_door-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    rewards_quad = np.array([np.load("./results_step3/quadruple/BCQ_quadruple_door-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_quad_avg = np.mean(rewards_quad, axis = 1)
    rewards_quad_std = np.std(rewards_quad, axis = 1)
    rewards_quad_avg = np.insert(rewards_quad_avg, 0, 0)
    rewards_quad_std = np.insert(rewards_quad_std, 0, 0)

    rewards_shared = np.array([np.load("./results_step3/shared/BCQ_shared_door-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_shared_avg = np.mean(rewards_shared, axis = 1)
    rewards_shared_std = np.std(rewards_shared, axis = 1)
    rewards_shared_avg = np.insert(rewards_shared_avg, 0, 0)
    rewards_shared_std = np.insert(rewards_shared_std, 0, 0)

    rewards_no = np.array([np.load("./results_step3/no_perturbation/BCQ_no_perturbation_door-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_no_avg = np.mean(rewards_no, axis = 1)
    rewards_no_std = np.std(rewards_no, axis = 1)
    rewards_no_avg = np.insert(rewards_no_avg, 0, 0)
    rewards_no_std = np.insert(rewards_no_std, 0, 0)

    rewards_09 = np.array([np.load("./results_step3/gamma09/BCQ_gamma09_door-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_09_avg = np.mean(rewards_09, axis = 1)
    rewards_09_std = np.std(rewards_09, axis = 1)
    rewards_09_avg = np.insert(rewards_09_avg, 0, 0)
    rewards_09_std = np.insert(rewards_09_std, 0, 0)

    rewards_200 = np.array([np.load("./results_step3/batch200/BCQ_batch200_door-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_200_avg = np.mean(rewards_200, axis = 1)
    rewards_200_std = np.std(rewards_200, axis = 1)
    rewards_200_avg = np.insert(rewards_200_avg, 0, 0)
    rewards_200_std = np.insert(rewards_200_std, 0, 0)

    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = 'GAN')
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.plot(x, rewards_quad_avg, color = 'green', label = 'quadruple')
    plt.fill_between(x, rewards_quad_avg + rewards_quad_std, rewards_quad_avg - rewards_quad_std, facecolor = 'lightgreen')
    plt.plot(x, rewards_shared_avg, color = 'darkviolet', label = 'shared')
    plt.fill_between(x, rewards_shared_avg + rewards_shared_std, rewards_shared_avg - rewards_shared_std, facecolor = 'plum')
    plt.plot(x, rewards_no_avg, color = 'gold', label = 'no_perturb')
    plt.fill_between(x, rewards_no_avg + rewards_no_std, rewards_no_avg - rewards_no_std, facecolor = 'lemonchiffon')
    plt.plot(x, rewards_09_avg, color = 'red', label = 'gamma 0.9')
    plt.fill_between(x, rewards_09_avg + rewards_09_std, rewards_09_avg - rewards_09_std, facecolor = 'salmon')
    plt.plot(x, rewards_200_avg, color = 'deeppink', label = 'batch size 200')
    plt.fill_between(x, rewards_200_avg + rewards_200_std, rewards_200_avg - rewards_200_std, facecolor = 'hotpink')
    plt.legend()
    plt.savefig("./Plots_step3/compare/door-expert.png")
    plt.show()
    plt.close()

    initialize_plot()
    plt.title('Relocate-expert-v0')
    rewards = np.array([np.load("./results_step3/baseline/BCQ_baseline_relocate-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_avg = np.mean(rewards, axis = 1)
    rewards_std = np.std(rewards, axis = 1)
    rewards_avg = np.insert(rewards_avg, 0, 0)
    rewards_std = np.insert(rewards_std, 0, 0)

    rewards_GAN = np.array([np.load("./results_step3/GAN/BCQ_GAN_relocate-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_GAN_avg = np.mean(rewards_GAN, axis = 1)
    rewards_GAN_std = np.std(rewards_GAN, axis = 1)
    rewards_GAN_avg = np.insert(rewards_GAN_avg, 0, 0)
    rewards_GAN_std = np.insert(rewards_GAN_std, 0, 0)

    rewards_quad = np.array([np.load("./results_step3/quadruple/BCQ_quadruple_relocate-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_quad_avg = np.mean(rewards_quad, axis = 1)
    rewards_quad_std = np.std(rewards_quad, axis = 1)
    rewards_quad_avg = np.insert(rewards_quad_avg, 0, 0)
    rewards_quad_std = np.insert(rewards_quad_std, 0, 0)

    rewards_shared = np.array([np.load("./results_step3/shared/BCQ_shared_relocate-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_shared_avg = np.mean(rewards_shared, axis = 1)
    rewards_shared_std = np.std(rewards_shared, axis = 1)
    rewards_shared_avg = np.insert(rewards_shared_avg, 0, 0)
    rewards_shared_std = np.insert(rewards_shared_std, 0, 0)

    rewards_no = np.array([np.load("./results_step3/no_perturbation/BCQ_no_perturbation_relocate-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_no_avg = np.mean(rewards_no, axis = 1)
    rewards_no_std = np.std(rewards_no, axis = 1)
    rewards_no_avg = np.insert(rewards_no_avg, 0, 0)
    rewards_no_std = np.insert(rewards_no_std, 0, 0)

    rewards_09 = np.array([np.load("./results_step3/gamma09/BCQ_gamma09_relocate-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_09_avg = np.mean(rewards_09, axis = 1)
    rewards_09_std = np.std(rewards_09, axis = 1)
    rewards_09_avg = np.insert(rewards_09_avg, 0, 0)
    rewards_09_std = np.insert(rewards_09_std, 0, 0)

    rewards_200 = np.array([np.load("./results_step3/batch200/BCQ_batch200_relocate-expert-v0_{}.npy".format(seed)) for seed in range(3)]).transpose()
    rewards_200_avg = np.mean(rewards_200, axis = 1)
    rewards_200_std = np.std(rewards_200, axis = 1)
    rewards_200_avg = np.insert(rewards_200_avg, 0, 0)
    rewards_200_std = np.insert(rewards_200_std, 0, 0)

    plt.plot(x, rewards_avg, color = 'royalblue', label = 'origin')
    plt.fill_between(x, rewards_avg + rewards_std, rewards_avg - rewards_std, facecolor = 'lightblue')
    plt.plot(x, rewards_GAN_avg, color = 'orange', label = 'GAN')
    plt.fill_between(x, rewards_GAN_avg + rewards_GAN_std, rewards_GAN_avg - rewards_GAN_std, facecolor = 'bisque')
    plt.plot(x, rewards_quad_avg, color = 'green', label = 'quadruple')
    plt.fill_between(x, rewards_quad_avg + rewards_quad_std, rewards_quad_avg - rewards_quad_std, facecolor = 'lightgreen')
    plt.plot(x, rewards_shared_avg, color = 'darkviolet', label = 'shared')
    plt.fill_between(x, rewards_shared_avg + rewards_shared_std, rewards_shared_avg - rewards_shared_std, facecolor = 'plum')
    plt.plot(x, rewards_no_avg, color = 'gold', label = 'no_perturb')
    plt.fill_between(x, rewards_no_avg + rewards_no_std, rewards_no_avg - rewards_no_std, facecolor = 'lemonchiffon')
    plt.plot(x, rewards_09_avg, color = 'red', label = 'gamma 0.9')
    plt.fill_between(x, rewards_09_avg + rewards_09_std, rewards_09_avg - rewards_09_std, facecolor = 'salmon')
    plt.plot(x, rewards_200_avg, color = 'deeppink', label = 'batch size 200')
    plt.fill_between(x, rewards_200_avg + rewards_200_std, rewards_200_avg - rewards_200_std, facecolor = 'hotpink')
    plt.legend()
    plt.savefig("./Plots_step3/compare/relocate-expert.png")
    plt.show()
    plt.close()

if __name__ == "__main__":

    os.makedirs("./Plots", exist_ok=True)

    human()
    cloned()
    expert()